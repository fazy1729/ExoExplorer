<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Cosmic Black Hole Simulator</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.11.4/gsap.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Orbitron:wght@400;500;700&family=Space+Mono:wght@400;700&display=swap');
        
        :root {
            --primary-glow: #4facfe;
            --secondary-glow: #00f2fe;
            --accent-glow: #a6c1ee;
            --event-horizon: rgba(79, 172, 254, 0.3);
            --space-dark: #0a0a15;
            --space-light: #1a1a2e;
        }
        
        body {
            font-family: 'Space Mono', monospace;
            background: radial-gradient(ellipse at bottom, var(--space-dark) 0%, #090A0F 100%);
            overflow: hidden;
            height: 100vh;
            color: #e0e0e0;
            perspective: 1000px;
        }
        
        .title {
            font-family: 'Orbitron', sans-serif;
            text-shadow: 0 0 10px var(--primary-glow), 0 0 20px var(--primary-glow);
            letter-spacing: 2px;
            background: linear-gradient(90deg, var(--primary-glow), var(--secondary-glow));
            -webkit-background-clip: text;
            background-clip: text;
            color: transparent;
            animation: title-glow 3s ease-in-out infinite alternate;
        }
        
        @keyframes title-glow {
            0% { text-shadow: 0 0 10px var(--primary-glow); }
            100% { text-shadow: 0 0 20px var(--primary-glow), 0 0 30px var(--secondary-glow); }
        }
        
        .black-hole-container {
            position: relative;
            width: 100%;
            height: 400px;
            display: flex;
            justify-content: center;
            align-items: center;
            margin: 2rem 0;
        }
        
        .black-hole {
            position: relative;
            width: 300px;
            height: 300px;
            border-radius: 50%;
            background: radial-gradient(circle at center, #000 0%, #000 60%, transparent 70%);
            box-shadow: 0 0 60px var(--primary-glow), 
                        0 0 100px rgba(79, 172, 254, 0.3),
                        inset 0 0 50px rgba(0, 0, 0, 0.8);
            transition: all 0.8s cubic-bezier(0.22, 1, 0.36, 1);
            transform-style: preserve-3d;
        }
        
        .accretion-disk {
            position: absolute;
            width: 450px;
            height: 150px;
            background: linear-gradient(90deg, 
                rgba(79, 172, 254, 0) 0%, 
                rgba(79, 172, 254, 0.8) 50%, 
                rgba(79, 172, 254, 0) 100%);
            border-radius: 50%;
            transform: rotateX(75deg);
            animation: rotateDisk 15s linear infinite;
            filter: blur(1px);
            opacity: 0.7;
            transition: all 0.8s ease;
        }
        
        .accretion-disk::before {
            content: '';
            position: absolute;
            width: 100%;
            height: 100%;
            background: radial-gradient(circle at center, transparent 60%, rgba(166, 193, 238, 0.3) 100%);
            border-radius: 50%;
        }
        
        .particle {
            position: absolute;
            border-radius: 50%;
            opacity: 0.8;
            filter: drop-shadow(0 0 5px currentColor);
        }
        
        .gravitational-lens {
            position: absolute;
            width: 100%;
            height: 100%;
            border-radius: 50%;
            background: radial-gradient(circle at center, transparent 40%, rgba(79, 172, 254, 0.1) 70%);
            animation: pulse 4s ease-in-out infinite;
            pointer-events: none;
        }
        
        .photon-sphere {
            position: absolute;
            width: 120%;
            height: 120%;
            top: -10%;
            left: -10%;
            border-radius: 50%;
            border: 1px solid rgba(79, 172, 254, 0.1);
            box-shadow: 0 0 30px rgba(79, 172, 254, 0.1);
            animation: photon-pulse 6s ease-in-out infinite;
        }
        
        .event-horizon {
            position: absolute;
            width: 100%;
            height: 100%;
            border-radius: 50%;
            border: 1px dashed var(--event-horizon);
            box-shadow: 0 0 20px var(--event-horizon);
            animation: horizon-pulse 5s linear infinite;
        }
        
        @keyframes rotateDisk {
            from { transform: rotateX(75deg) rotateZ(0deg); }
            to { transform: rotateX(75deg) rotateZ(360deg); }
        }
        
        @keyframes pulse {
            0%, 100% { transform: scale(1); opacity: 0.5; }
            50% { transform: scale(1.05); opacity: 0.8; }
        }
        
        @keyframes photon-pulse {
            0%, 100% { opacity: 0.3; transform: scale(1); }
            50% { opacity: 0.6; transform: scale(1.05); }
        }
        
        @keyframes horizon-pulse {
            0% { border-color: rgba(79, 172, 254, 0.3); }
            50% { border-color: rgba(79, 172, 254, 0.6); }
            100% { border-color: rgba(79, 172, 254, 0.3); }
        }
        
        .control-panel {
            background: rgba(15, 23, 42, 0.7);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(79, 172, 254, 0.2);
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);
            transition: all 0.3s ease;
        }
        
        .control-panel:hover {
            border-color: rgba(79, 172, 254, 0.4);
            box-shadow: 0 10px 40px rgba(0, 0, 0, 0.7);
        }
        
        .slider {
            -webkit-appearance: none;
            width: 100%;
            height: 6px;
            background: linear-gradient(90deg, var(--space-light), var(--primary-glow));
            border-radius: 3px;
            outline: none;
            transition: all 0.3s ease;
        }
        
        .slider:hover {
            height: 8px;
        }
        
        .slider::-webkit-slider-thumb {
            -webkit-appearance: none;
            width: 20px;
            height: 20px;
            border-radius: 50%;
            background: var(--primary-glow);
            cursor: pointer;
            box-shadow: 0 0 10px var(--primary-glow);
            transition: all 0.3s ease;
        }
        
        .slider::-webkit-slider-thumb:hover {
            transform: scale(1.2);
            box-shadow: 0 0 15px var(--primary-glow);
        }
        
        .star {
            position: absolute;
            background: white;
            border-radius: 50%;
            animation: twinkle 2s infinite alternate;
            will-change: transform, opacity;
        }
        
        @keyframes twinkle {
            0% { opacity: 0.2; transform: scale(0.8); }
            100% { opacity: 1; transform: scale(1.2); }
        }
        
        .btn {
            position: relative;
            overflow: hidden;
            transition: all 0.3s ease;
            z-index: 1;
        }
        
        .btn::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(79, 172, 254, 0.3), transparent);
            transition: all 0.6s ease;
            z-index: -1;
        }
        
        .btn:hover::before {
            left: 100%;
        }
        
        .btn-glow {
            box-shadow: 0 0 15px rgba(79, 172, 254, 0.5);
        }
        
        .modal {
            opacity: 0;
            visibility: hidden;
            transition: all 0.3s ease;
        }
        
        .modal.active {
            opacity: 1;
            visibility: visible;
        }
        
        .modal-content {
            transform: translateY(20px);
            transition: all 0.3s ease;
        }
        
        .modal.active .modal-content {
            transform: translateY(0);
        }
        
        @media (max-width: 768px) {
            .black-hole-container {
                height: 300px;
            }
            
            .black-hole {
                width: 200px;
                height: 200px;
            }
            
            .accretion-disk {
                width: 300px;
                height: 100px;
            }
        }
    </style>
</head>
<body class="flex flex-col items-center justify-center relative overflow-hidden">
    <!-- Background stars -->
    <div id="stars"></div>
    
    <!-- Main content -->
    <div class="z-10 text-center px-4 w-full max-w-4xl">
        <h1 class="title text-4xl md:text-5xl font-bold mb-6">COSMIC BLACK HOLE SIMULATOR</h1>
        
        <div class="black-hole-container">
            <div class="black-hole" id="blackHole">
                <div class="accretion-disk"></div>
                <div class="gravitational-lens"></div>
                <div class="photon-sphere"></div>
                <div class="event-horizon"></div>
                <div id="particles"></div>
                <div id="light-bending"></div>
            </div>
        </div>
        
        <div class="control-panel rounded-xl p-6 max-w-md mx-auto">
            <div class="mb-6">
                <label class="block text-sm font-medium mb-3 text-gray-300">Mass (Solar Masses) <span id="massValue" class="text-blue-300">10</span>M☉</label>
                <input type="range" id="massSlider" min="1" max="100" value="10" class="slider">
                <div class="flex justify-between text-xs text-gray-400 mt-1">
                    <span>1M☉</span>
                    <span>100M☉</span>
                </div>
            </div>
            
            <div class="mb-6">
                <label class="block text-sm font-medium mb-3 text-gray-300">Spin Rate <span id="spinValue" class="text-blue-300">50</span>%</label>
                <input type="range" id="spinSlider" min="0" max="100" value="50" class="slider">
                <div class="flex justify-between text-xs text-gray-400 mt-1">
                    <span>Slow</span>
                    <span>Fast</span>
                </div>
            </div>
            
            <div class="mb-6">
                <label class="block text-sm font-medium mb-3 text-gray-300">Accretion Disk <span id="diskValue" class="text-blue-300">70</span>%</label>
                <input type="range" id="diskSlider" min="0" max="100" value="70" class="slider">
                <div class="flex justify-between text-xs text-gray-400 mt-1">
                    <span>Dim</span>
                    <span>Bright</span>
                </div>
            </div>
            
            <div class="flex justify-center space-x-4">
                <button id="resetBtn" class="btn px-4 py-2 bg-gray-800 hover:bg-gray-700 rounded-lg flex items-center">
                    <i class="fas fa-redo mr-2"></i> Reset
                </button>
                <button id="infoBtn" class="btn px-4 py-2 bg-blue-900 hover:bg-blue-800 rounded-lg flex items-center btn-glow">
                    <i class="fas fa-info-circle mr-2"></i> Info
                </button>
            </div>
        </div>
    </div>
    
    <!-- Info modal -->
    <div id="infoModal" class="modal fixed inset-0 bg-black bg-opacity-80 flex items-center justify-center z-50">
        <div class="modal-content bg-gradient-to-br from-gray-900 to-gray-800 rounded-xl p-6 max-w-md mx-4 relative border border-gray-700">
            <button id="closeModal" class="absolute top-4 right-4 text-gray-400 hover:text-white transition">
                <i class="fas fa-times text-xl"></i>
            </button>
            <h2 class="text-xl font-bold mb-4 text-blue-300">About Black Holes</h2>
            <div class="space-y-4 text-gray-300">
                <p>Black holes are regions of spacetime where gravity is so strong that nothing—no particles or even electromagnetic radiation such as light—can escape from it.</p>
                <p>This simulator demonstrates key features:</p>
                <ul class="list-disc pl-5 space-y-2">
                    <li><span class="text-blue-300">Event Horizon:</span> The point of no return</li>
                    <li><span class="text-blue-300">Accretion Disk:</span> Superheated matter spiraling inward</li>
                    <li><span class="text-blue-300">Photon Sphere:</span> Where light orbits the black hole</li>
                    <li><span class="text-blue-300">Gravitational Lensing:</span> Distortion of light around the mass</li>
                </ul>
                <p>Adjust the controls to see how different black hole properties affect their appearance and behavior.</p>
            </div>
        </div>
    </div>
    
    <script>
        // Enhanced starfield
        function createStarfield() {
            const starsContainer = document.getElementById('stars');
            starsContainer.innerHTML = '';
            
            for (let i = 0; i < 300; i++) {
                const star = document.createElement('div');
                star.className = 'star';
                
                // Position stars in 3D space
                const x = Math.random() * 100;
                const y = Math.random() * 100;
                const z = Math.random() * 1000;
                const size = Math.random() * 3;
                
                star.style.left = `${x}%`;
                star.style.top = `${y}%`;
                star.style.width = `${size}px`;
                star.style.height = `${size}px`;
                star.style.animationDelay = `${Math.random() * 2}s`;
                star.style.transform = `translateZ(${z}px)`;
                
                // Add color variation
                const hue = 200 + Math.random() * 40 - 20;
                star.style.backgroundColor = `hsl(${hue}, 100%, ${70 + Math.random() * 30}%)`;
                
                starsContainer.appendChild(star);
            }
        }
        
        // Enhanced particle system
        function createParticles() {
            const particlesContainer = document.getElementById('particles');
            particlesContainer.innerHTML = '';
            const blackHole = document.getElementById('blackHole');
            const bhRect = blackHole.getBoundingClientRect();
            const bhCenter = {
                x: bhRect.left + bhRect.width / 2,
                y: bhRect.top + bhRect.height / 2
            };
            
            const particleCount = 40 + Math.floor(Math.random() * 20);
            
            for (let i = 0; i < particleCount; i++) {
                const particle = document.createElement('div');
                particle.className = 'particle';
                
                // Random position in an annulus around the black hole
                const angle = Math.random() * Math.PI * 2;
                const distance = 200 + Math.random() * 150;
                const x = Math.cos(angle) * distance;
                const y = Math.sin(angle) * distance;
                
                particle.style.left = `calc(50% + ${x}px)`;
                particle.style.top = `calc(50% + ${y}px)`;
                
                // Random size and color
                const size = Math.random() * 4 + 2;
                particle.style.width = `${size}px`;
                particle.style.height = `${size}px`;
                
                // Color based on temperature (blue to white)
                const hue = 200 + Math.random() * 40 - 20;
                const saturation = 80 + Math.random() * 20;
                const lightness = 60 + Math.random() * 30;
                particle.style.backgroundColor = `hsl(${hue}, ${saturation}%, ${lightness}%)`;
                
                // Add to DOM
                particlesContainer.appendChild(particle);
                
                // Physics-based animation
                const duration = 2 + Math.random() * 3;
                const delay = Math.random() * 4;
                const spiralFactor = 0.8 + Math.random() * 0.4;
                
                gsap.to(particle, {
                    x: `-=${x * spiralFactor}`,
                    y: `-=${y * spiralFactor}`,
                    scale: 0.1,
                    opacity: 0,
                    duration: duration,
                    delay: delay,
                    ease: "power3.in",
                    onComplete: () => {
                        particle.remove();
                    }
                });
            }
        }
        
        // Create gravitational lensing effect
        function createLightBending() {
            const container = document.getElementById('light-bending');
            container.innerHTML = '';
            
            // Create distorted background elements
            for (let i = 0; i < 8; i++) {
                const segment = document.createElement('div');
                segment.className = 'light-segment';
                
                // Position around the black hole
                const angle = (i / 8) * Math.PI * 2;
                const distance = 180;
                const x = Math.cos(angle) * distance;
                const y = Math.sin(angle) * distance;
                
                segment.style.left = `calc(50% + ${x}px)`;
                segment.style.top = `calc(50% + ${y}px)`;
                segment.style.transform = `rotate(${angle}rad)`;
                
                // Animate toward black hole with distortion
                gsap.to(segment, {
                    x: `-=${x * 0.7}`,
                    y: `-=${y * 0.7}`,
                    scale: 0.5,
                    opacity: 0,
                    duration: 4,
                    delay: i * 0.2,
                    ease: "power2.in",
                    onComplete: () => {
                        segment.remove();
                    }
                });
                
                container.appendChild(segment);
            }
        }
        
        // Initialize controls
        const massSlider = document.getElementById('massSlider');
        const spinSlider = document.getElementById('spinSlider');
        const diskSlider = document.getElementById('diskSlider');
        const massValue = document.getElementById('massValue');
        const spinValue = document.getElementById('spinValue');
        const diskValue = document.getElementById('diskValue');
        const resetBtn = document.getElementById('resetBtn');
        const infoBtn = document.getElementById('infoBtn');
        const infoModal = document.getElementById('infoModal');
        const closeModal = document.getElementById('closeModal');
        const blackHole = document.getElementById('blackHole');
        const accretionDisk = document.querySelector('.accretion-disk');
        
        // Update black hole based on controls with more realistic physics
        function updateBlackHole() {
            const mass = parseFloat(massSlider.value);
            const spin = parseFloat(spinSlider.value);
            const diskIntensity = parseFloat(diskSlider.value);
            
            // Update displayed values
            massValue.textContent = mass;
            spinValue.textContent = spin;
            diskValue.textContent = diskIntensity;
            
            // Calculate Schwarzschild radius (simplified for visualization)
            // In reality, R_s = 2GM/c^2 ≈ 3km per solar mass
            const schwarzschildRadius = mass * 3; // 3px per solar mass
            const displaySize = 150 + schwarzschildRadius * 2;
            
            // Update black hole size
            gsap.to(blackHole, {
                width: `${displaySize}px`,
                height: `${displaySize}px`,
                duration: 0.8,
                ease: "power2.out"
            });
            
            // Update accretion disk
            const diskSize = displaySize * 1.5;
            const diskThickness = 30 + (diskIntensity / 100 * 20);
            
            gsap.to(accretionDisk, {
                width: `${diskSize}px`,
                height: `${diskThickness}px`,
                opacity: diskIntensity / 100 * 0.8,
                filter: `blur(${1 + (diskIntensity / 100 * 2)}px)`,
                duration: 0.8
            });
            
            // Update spin (affects disk animation speed and shape)
            const spinSpeed = 15 - (spin / 100 * 12); // Faster spin = faster rotation
            accretionDisk.style.animationDuration = `${spinSpeed}s`;
            
            // Make disk more elliptical at higher spins
            if (spin > 70) {
                accretionDisk.style.transform = `rotateX(75deg) scaleY(${1 + (spin - 70) / 50})`;
            } else {
                accretionDisk.style.transform = 'rotateX(75deg) scaleY(1)';
            }
            
            // Update photon sphere (closer to event horizon at higher spins)
            const photonSphere = document.querySelector('.photon-sphere');
            const photonSize = 1.2 - (spin / 100 * 0.3);
            photonSphere.style.width = `${photonSize * 100}%`;
            photonSphere.style.height = `${photonSize * 100}%`;
            photonSphere.style.top = `${-(photonSize - 1) * 50}%`;
            photonSphere.style.left = `${-(photonSize - 1) * 50}%`;
            
            // Update gravitational lensing effect
            const lens = document.querySelector('.gravitational-lens');
            const lensSize = 1 + (mass / 100 * 0.2);
            lens.style.background = `radial-gradient(circle at center, transparent 40%, rgba(79, 172, 254, ${0.05 + (mass / 100 * 0.1)}) 70%)`;
            
            // More dramatic lensing for larger masses
            if (mass > 50) {
                lens.style.background = `radial-gradient(circle at center, transparent 30%, rgba(79, 172, 254, ${0.1 + (mass / 100 * 0.2)}) 60%)`;
            }
        }
        
        // Event listeners with animations
        massSlider.addEventListener('input', () => {
            updateBlackHole();
            // Add subtle pulse effect when adjusting mass
            gsap.to(blackHole, {
                scale: 1.02,
                duration: 0.2,
                yoyo: true,
                repeat: 1
            });
        });
        
        spinSlider.addEventListener('input', () => {
            updateBlackHole();
            // Add disk warp effect when adjusting spin
            gsap.to(accretionDisk, {
                rotateX: '75deg',
                scaleY: spinSlider.value > 70 ? 1.2 : 1,
                duration: 0.5
            });
        });
        
        diskSlider.addEventListener('input', () => {
            updateBlackHole();
            // Add brightness pulse when adjusting disk
            gsap.to(accretionDisk, {
                opacity: (diskSlider.value / 100 * 0.8) * 1.2,
                duration: 0.3,
                yoyo: true,
                repeat: 1
            });
        });
        
        resetBtn.addEventListener('click', () => {
            // Animate sliders back to default
            gsap.to(massSlider, {value: 10, duration: 0.8, ease: "elastic.out(1, 0.5)", onUpdate: updateBlackHole});
            gsap.to(spinSlider, {value: 50, duration: 0.8, ease: "elastic.out(1, 0.5)", delay: 0.1, onUpdate: updateBlackHole});
            gsap.to(diskSlider, {value: 70, duration: 0.8, ease: "elastic.out(1, 0.5)", delay: 0.2, onUpdate: updateBlackHole});
            
            // Button press animation
            gsap.to(resetBtn, {
                scale: 0.9,
                duration: 0.1,
                yoyo: true,
                repeat: 1
            });
        });
        
        infoBtn.addEventListener('click', () => {
            infoModal.classList.add('active');
            // Prevent scrolling when modal is open
            document.body.style.overflow = 'hidden';
        });
        
        closeModal.addEventListener('click', () => {
            infoModal.classList.remove('active');
            document.body.style.overflow = '';
        });
        
        // Close modal when clicking outside
        infoModal.addEventListener('click', (e) => {
            if (e.target === infoModal) {
                infoModal.classList.remove('active');
                document.body.style.overflow = '';
            }
        });
        
        // Initialize
        createStarfield();
        updateBlackHole();
        createParticles();
        createLightBending();
        
        // Animation loop
        setInterval(createParticles, 2000);
        setInterval(createLightBending, 3000);
        
        // Add parallax effect to stars on mouse move
        document.addEventListener('mousemove', (e) => {
            const x = e.clientX / window.innerWidth;
            const y = e.clientY / window.innerHeight;
            
            gsap.to('.star', {
                x: x * 10,
                y: y * 10,
                duration: 2,
                ease: "power1.out"
            });
        });
        
        // Add responsive resize handler
        window.addEventListener('resize', () => {
            createStarfield();
        });
    </script>
</body>
</html>